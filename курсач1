#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <malloc.h>
#include <conio.h>
#include <png.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>


/* A coloured pixel. */
int count = 0;
typedef struct {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
    uint8_t alpha;
} pixel_t;

/* A picture. */

typedef struct {
    pixel_t* pixels;
    size_t width;
    size_t height;
} bitmap_t;

/* Given "bitmap", this returns the pixel of bitmap at the point
("x", "y"). */

static pixel_t* pixel_at(bitmap_t* bitmap, int x, int y)
{
    return bitmap->pixels + bitmap->width * y + x;
}


/* Write "bitmap" to a PNG file specified by "path"; returns 0 on
success, non-zero on error. */

static int save_png_to_file(bitmap_t* bitmap, const char* path)
{
    FILE* fp;
    png_structp png_ptr = NULL;
    png_infop info_ptr = NULL;
    size_t x, y;
    png_byte** row_pointers = NULL;
    /* "status" contains the return value of this function. At first
    it is set to a value which means 'failure'. When the routine
    has finished its work, it is set to a value which means
    'success'. */
    int status = -1;
    /* The following number is set by trial and error only. I cannot
    see where it it is documented in the libpng manual.
    */
    int pixel_size = 4;
    int depth = 8;

    fp = fopen(path, "wb");
    if (!fp) {
        goto fopen_failed;
    }

    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (png_ptr == NULL) {
        goto png_create_write_struct_failed;
    }

    info_ptr = png_create_info_struct(png_ptr);
    if (info_ptr == NULL) {
        goto png_create_info_struct_failed;
    }

    /* Set up error handling. */

    if (setjmp(png_jmpbuf(png_ptr))) {
        goto png_failure;
    }

    /* Set image attributes. */

    png_set_IHDR(png_ptr,
        info_ptr,
        bitmap->width,
        bitmap->height,
        depth,
        PNG_COLOR_TYPE_RGBA,
        PNG_INTERLACE_NONE,
        PNG_COMPRESSION_TYPE_DEFAULT,
        PNG_FILTER_TYPE_DEFAULT);

    /* Initialize rows of PNG. */

    row_pointers = png_malloc(png_ptr, bitmap->height * sizeof(png_byte*));
    for (y = 0; y < bitmap->height; ++y) {
        png_byte* row =
            png_malloc(png_ptr, sizeof(uint8_t) * bitmap->width * pixel_size);
        row_pointers[y] = row;
        for (x = 0; x < bitmap->width; ++x) {
            pixel_t* pixel = pixel_at(bitmap, x, y);
            *row++ = pixel->red;
            *row++ = pixel->green;
            *row++ = pixel->blue;
            *row++ = pixel->alpha;
        }
    }

    /* Write the image data to "fp". */

    png_init_io(png_ptr, fp);
    png_set_rows(png_ptr, info_ptr, row_pointers);
    png_write_png(png_ptr, info_ptr, PNG_TRANSFORM_IDENTITY, NULL);

    /* The routine has successfully written the file, so we set
    "status" to a value which indicates success. */

    status = 0;

    for (y = 0; y < bitmap->height; y++) {
        png_free(png_ptr, row_pointers[y]);
    }
    png_free(png_ptr, row_pointers);

png_failure:
png_create_info_struct_failed:
    png_destroy_write_struct(&png_ptr, &info_ptr);
png_create_write_struct_failed:
    fclose(fp);
fopen_failed:
    return status;
}

/* Given "value" and "max", the maximum value which we expect "value"
to take, this returns an integer between 0 and 255 proportional to
"value" divided by "max". */

static int pix(int value, int max)
{
    if (value < 0)
        return 0;
    return (int)(256.0 * ((double)(value) / (double)max));
}


void drawRect(double startX, int startY, double width, int height, bitmap_t fruit) {

    for (double x = startX; x < width+ startX; x++) {
        for (int y = startY; y < height+ startY; y++) {
            pixel_t* pixel = pixel_at(&fruit, x, y);
            pixel->red = 0;
            pixel->blue = 0;
            pixel->green = 0;
            pixel->alpha = 255;
        }
    }
}void drawRedRect(double startX, int startY, double width, int height, bitmap_t fruit) {

    for (double x = startX; x < width + startX; x++) {
        for (int y = startY; y < height + startY; y++) {
            pixel_t* pixel = pixel_at(&fruit, x, y);
            pixel->red = 255;
            pixel->blue = 0;
            pixel->green = 0;
            pixel->alpha = 255;
        }
    }
}
void drawArr(bitmap_t fruit, int* arr, int size) {
    double elemSize = 1280.0 / size;
    for (int i = 0; i < size; i++) {
        drawRect(i * elemSize, 300 - (arr[i] * 3), elemSize, (arr[i] * 3), fruit);
    }

}
void drawArrWithSelectedItems(bitmap_t fruit, int* arr, int size, int item1, int item2) {
    double elemSize = 1280.0 / size;
    for (int i = 0; i < size; i++) {
        drawRect(i * elemSize, 300 - (arr[i] * 3), elemSize, (arr[i] * 3), fruit);
    }
    drawRedRect(item1 * elemSize, 300 - (arr[item1] * 3), elemSize, (arr[item1] * 3), fruit);
    drawRedRect(item2 * elemSize, 300 - (arr[item2] * 3), elemSize, (arr[item2] * 3), fruit);

}
void clearCanvas(bitmap_t fruit) {
    for (int x = 0; x < fruit.width; x++) {
        for (int y = 0; y < fruit.height; y++) {
            pixel_t* pixel = pixel_at(&fruit, x, y);
            pixel->red = 255;
            pixel->blue = 255;
            pixel->green = 255;
            pixel->alpha = 255;
        }
    }
}
void saveFrame(bitmap_t fruit) {
    count++;
    _mkdir("frames");
    char name[] = "frames/frame0000.png";

    char num0 = count % 10 + '0';
    name[15] = num0;
    if (count >= 10) {
        char num1 = (count % 100 - count % 10) / 10 + '0';
        name[14] = num1;
    }
    if (count >= 100) {
        char num2 = (count % 1000 - count % 100) / 100 + '0';
        name[13] = num2;
    }
    if (count >= 1000) {
        char num3 = count / 1000 + '0';
        name[12] = num3;
    }
    save_png_to_file(&fruit, name);
}
void clearDrawAndSave(bitmap_t fruit, int* arr, int size, int left, int right) {
    clearCanvas(fruit);
    drawArrWithSelectedItems(fruit, arr, size, left, right);
    saveFrame(fruit);
}
void quickSort(int* numbers, int left, int right, bitmap_t fruit, int* arr, int size)
{
    int pivot; // разрешающий элемент
    int l_hold = left; //левая граница
    int r_hold = right; // правая граница
    pivot = numbers[left];
    while (left < right) // пока границы не сомкнутся
    {
        while ((numbers[right] >= pivot) && (left < right))

            right--; // сдвигаем правую границу пока элемент [right] больше [pivot]
            clearDrawAndSave(fruit, arr, size, left, right);
        if (left != right) // если границы не сомкнулись
        {
            numbers[left] = numbers[right]; // перемещаем элемент [right] на место разрешающего

            clearDrawAndSave(fruit, arr, size, left, right);
            left++; // сдвигаем левую границу вправо
            clearDrawAndSave(fruit, arr, size, left, right);
        }
        while ((numbers[left] <= pivot) && (left < right))
            left++; // сдвигаем левую границу пока элемент [left] меньше [pivot]
            clearDrawAndSave(fruit, arr, size, left, right);
        if (left != right) // если границы не сомкнулись
        {
            numbers[right] = numbers[left]; // перемещаем элемент [left] на место [right]

            clearDrawAndSave(fruit, arr, size, left, right);
            right--; // сдвигаем правую границу вправо
            clearDrawAndSave(fruit, arr, size, left, right);
        }
    }
    numbers[left] = pivot; // ставим разрешающий элемент на место
    pivot = left;
    left = l_hold;
    right = r_hold;
    clearDrawAndSave(fruit, arr, size, left, right);
    if (left < pivot) // Рекурсивно вызываем сортировку для левой и правой части массива
        quickSort(numbers, left, pivot - 1, fruit, arr, size);
    if (right > pivot)
        quickSort(numbers, pivot + 1, right, fruit, arr, size);
}

int main(int argc, char** argv)
{
   int size;
    int r = strncmp(argv[1], "-h");
    if (argc == 1) {
        printf("Please add arguments like -h");
        return 0;
    }
    if (!strncmp(argv[1], "-h")) {
        printf("Program for quick sort visualization.\n General options : \n -n Number of values to sort \n -h Show help ");
        return 0;
    }
    else if (!strncmp(argv[1], "-n")) {
        size = atoi(argv[2]);
    }
    else {
        printf("Please add normal arguments like -h");
        return 0;
    }
    bitmap_t fruit;
    int x;
    int y; 

    int* arr;  // указатель на массив
    // Выделение памяти
    arr= (int*)malloc(size * sizeof(int));
    // Ввод элементов массива
    srand(time(NULL));
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 101;
    }

    fruit.width = 1280;
    fruit.height = 300;

    fruit.pixels = calloc(sizeof(pixel_t), fruit.width * fruit.height);


    quickSort(arr, 0, size - 1, fruit, arr, size); // вызов функции сортировки
    
    free(arr);
    free(fruit.pixels);
    return 0;
 }
